{"pageProps":{"post":{"title":"C++ Module 03","date":"2023-11-13T12:25:58.169Z","slug":"cpp_module03","author":{"name":"Amine Beihaqi","picture":"/Logo.svg"},"content":"<h1>C++ Module 03: Embracing Inheritance and Robot Fusion</h1>\n<h2>Introduction</h2>\n<p>Module 03 of the C++ curriculum at 1337 coding school explores the concept of inheritance in object-oriented programming. Students dive into creating a hierarchy of robot classes, each building upon the functionalities of its predecessors. The exercises involve designing and implementing classes that inherit attributes and behaviors, emphasizing proper construction/destruction chaining.</p>\n<h2>General Rules Recap</h2>\n<p>The general rules remain consistent, emphasizing clean code, adherence to naming conventions, and compliance with the C++98 standard. Students are encouraged to use the C++ standard library while adhering to design principles, such as the Orthodox Canonical Form.</p>\n<h2>Exercise 00: Aaaaand... OPEN!</h2>\n<p><strong>Task:</strong> Implement the <code>ClapTrap</code> class, representing a basic robot with attributes like name, hit points, energy points, and attack damage. Define member functions for attacking, taking damage, and being repaired. Ensure energy points and hit points constraints are enforced.</p>\n<h2>Exercise 01: Serena, my love!</h2>\n<p><strong>Task:</strong> Create the <code>ScavTrap</code> class, a derived robot inheriting from <code>ClapTrap</code>. Customize the construction, destruction, and attack messages. Introduce a new member function, <code>guardGate()</code>, exclusive to <code>ScavTrap</code>. Demonstrate proper construction/destruction chaining.</p>\n<h2>Exercise 02: Repetitive work</h2>\n<p><strong>Task:</strong> Design the <code>FragTrap</code> class, another derived robot inheriting from <code>ClapTrap</code>. Customize construction, destruction, and attack messages. Add a unique member function, <code>highFivesGuys()</code>, and ensure proper construction/destruction chaining.</p>\n<h2>Exercise 03: Now itâ€™s weird!</h2>\n<p><strong>Task:</strong> Embark on the creation of <code>DiamondTrap</code>, a robot that inherits from both <code>FragTrap</code> and <code>ScavTrap</code>. Overcome the challenge of dealing with multiple parent classes and handle attribute and member function conflicts. Introduce a unique member function, <code>whoAmI()</code>, that displays both its name and its <code>ClapTrap</code> name. Experiment with constructor chaining.</p>\n<h2>Conclusion</h2>\n<p>Module 03 offers a hands-on exploration of inheritance, enabling students to create a hierarchy of robot classes with distinct attributes and behaviors. The exercises progressively challenge students to design and implement more complex classes, showcasing the power and flexibility of inheritance in C++. As students navigate the intricacies of class hierarchies, they gain valuable insights into creating modular and extensible code.</p>\n<p>Happy coding, and may your robotic creations conquer the realm of inheritance in C++!</p>","ogImage":{"url":"/assets/projects/dynamic-routing/1337.jpeg"},"coverImage":"/assets/projects/dynamic-routing/1337.jpeg"}},"__N_SSG":true}