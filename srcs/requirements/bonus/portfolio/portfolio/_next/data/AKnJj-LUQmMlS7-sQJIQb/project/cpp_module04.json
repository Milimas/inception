{"pageProps":{"post":{"title":"C++ Module 04","date":"2023-11-13T12:25:58.169Z","slug":"cpp_module04","author":{"name":"Amine Beihaqi","picture":"/Logo.svg"},"content":"<h1>C++ Module 04: Embracing Subtype Polymorphism, Abstract Classes, and Interfaces</h1>\n<h2>Introduction</h2>\n<p>Module 04 of the C++ curriculum at 1337 coding school delves into the realm of subtype polymorphism, abstract classes, and interfaces. The exercises aim to reinforce the understanding of object-oriented programming principles, emphasizing polymorphism and encapsulation. Students will design and implement classes that leverage inheritance, abstract classes, and interfaces to create a cohesive system.</p>\n<h2>General Rules Recap</h2>\n<p>The general rules for this module remain consistent with the previous ones, emphasizing clean code, adherence to naming conventions, and compliance with the C++98 standard. Students are encouraged to leverage the C++ standard library while avoiding external libraries and functions that are forbidden.</p>\n<h2>Exercise 00: Polymorphism</h2>\n<p><strong>Task:</strong> Implement a base class <code>Animal</code> and derived classes <code>Dog</code> and <code>Cat</code>. Utilize subtype polymorphism to enable each animal to make a distinct sound. Emphasize dynamic dispatch by using pointers to the base class. Introduce a <code>WrongCat</code> class to test the importance of correct inheritance.</p>\n<h2>Exercise 01: I donâ€™t want to set the world on fire</h2>\n<p><strong>Task:</strong> Design a <code>Brain</code> class and incorporate it into the <code>Dog</code> and <code>Cat</code> classes. Manage memory appropriately by using dynamic memory allocation and deallocation. Create an array of <code>Animal</code> objects, ensuring proper destruction of each object and checking for memory leaks.</p>\n<h2>Exercise 02: Abstract class</h2>\n<p><strong>Task:</strong> Modify the <code>Animal</code> class to make it abstract, preventing its instantiation. This ensures that only derived classes like <code>Dog</code> and <code>Cat</code> can be instantiated. Verify that the functionality remains intact while preventing direct instantiation of <code>Animal</code>.</p>\n<h2>Exercise 03: Interface &#x26; recap</h2>\n<p><strong>Task:</strong> Implement an interface-like structure using pure abstract classes to define contracts for classes. Create classes <code>AMateria</code>, <code>Ice</code>, <code>Cure</code>, <code>ICharacter</code>, <code>Character</code>, <code>IMateriaSource</code>, and <code>MateriaSource</code>. Explore deep copying, inventory management, and Materia creation through learning \"templates.\" Emphasize encapsulation and polymorphism.</p>\n<h2>Conclusion</h2>\n<p>Module 04 deepens students' understanding of object-oriented programming concepts by introducing subtype polymorphism, abstract classes, and interfaces. The exercises challenge students to apply these principles effectively, fostering the creation of flexible and extensible code. By the end of this module, students gain proficiency in leveraging C++ features to build complex systems with polymorphic behavior.</p>\n<p>Happy coding, and may your codebase flourish with the power of polymorphism and abstract design!</p>","ogImage":{"url":"/assets/projects/dynamic-routing/1337.jpeg"},"coverImage":"/assets/projects/dynamic-routing/1337.jpeg"}},"__N_SSG":true}