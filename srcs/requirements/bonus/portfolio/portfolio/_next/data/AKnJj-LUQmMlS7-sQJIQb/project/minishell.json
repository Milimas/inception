{"pageProps":{"post":{"title":"Minishell","date":"2023-07-13T01:00:48.279Z","slug":"minishell","author":{"name":"Amine Beihaqi","picture":"/Logo.svg"},"content":"<h1>Minishell: A Journey into Shell Programming</h1>\n<h2>Introduction</h2>\n<p>Welcome to the world of shell programming with Minishell! In this project, you'll embark on a journey to create your own simple shell, akin to the legendary bash. This project is not just about writing code; it's about understanding processes, file descriptors, and the essence of communication between humans and computers through commands.</p>\n<h2>Common Instructions</h2>\n<p>Before diving into the specifics of Minishell, let's revisit some common instructions applicable to all projects:</p>\n<ul>\n<li>Your implementation must be in C.</li>\n<li>Adhere to the Norm, including bonus files/functions in the norm check.</li>\n<li>Ensure functions don't quit unexpectedly; unexpected errors lead to non-functional projects.</li>\n<li>Free heap memory appropriately; no memory leaks are tolerated.</li>\n<li>Include a Makefile with essential rules: <code>$(NAME)</code>, <code>all</code>, <code>clean</code>, <code>fclean</code>, and <code>re</code>.</li>\n<li>Separate bonus parts in <code>_bonus.{c/h}</code> if not specified otherwise.</li>\n<li>If you use your <code>libft</code>, include its sources and Makefile in a <code>libft</code> folder.</li>\n</ul>\n<h2>Mandatory Part: The Birth of Minishell</h2>\n<h3>Program Name: minishell</h3>\n<h3>Turn-in Files: Makefile, *.h, *.c</h3>\n<h4>Arguments</h4>\n<p>External Functions:</p>\n<ul>\n<li>readline, rl_clear_history, rl_on_new_line, rl_replace_line, rl_redisplay, add_history, printf, malloc, free, write, access, open, read, close, fork, wait, waitpid, wait3, wait4, signal, sigaction, sigemptyset, sigaddset, kill, exit, getcwd, chdir, stat, lstat, fstat, unlink, execve, dup, dup2, pipe, opendir, readdir, closedir, strerror, perror, isatty, ttyname, ttyslot, ioctl, getenv, tcsetattr, tcgetattr, tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs\nLibft Authorized: Yes</li>\n</ul>\n<h4>Description</h4>\n<p>Build your own shell, and make it:</p>\n<ul>\n<li>Display a prompt when waiting for a new command.</li>\n<li>Have a working history.</li>\n<li>Search and launch the right executable based on the PATH variable or using a relative or absolute path.</li>\n<li>Use only one global variable.</li>\n<li>Not interpret unclosed quotes or special characters not required by the subject.</li>\n<li>Handle single quotes and double quotes correctly.</li>\n<li>Implement redirections: <code>&#x3C;</code>, <code>></code>, <code>&#x3C;&#x3C;</code>, and <code>>></code>.</li>\n<li>Implement pipes (<code>|</code>) for command pipelines.</li>\n<li>Handle environment variables (<code>$</code> followed by a sequence of characters).</li>\n<li>Handle <code>$?</code> to expand to the exit status of the most recently executed foreground pipeline.</li>\n<li>Handle <code>ctrl-C</code>, <code>ctrl-D</code>, and <code>ctrl-\\</code> as in bash.</li>\n<li>Implement builtins: <code>echo</code>, <code>cd</code>, <code>pwd</code>, <code>export</code>, <code>unset</code>, <code>env</code>, <code>exit</code>.</li>\n</ul>\n<h3>Mandatory Part: The Core of Minishell</h3>\n<p>Your shell should be robust, handling various scenarios and functionalities as described in the project's instructions. Ensure the correct parsing and execution of commands, redirections, pipes, and builtins.</p>\n<h2>Bonus Part: Elevating Minishell</h2>\n<p>The bonus part allows you to enhance your Minishell further. Implement the following features if the mandatory part is perfect:</p>\n<ul>\n<li>Implement <code>&#x26;&#x26;</code> and <code>||</code> with parenthesis for priorities.</li>\n<li>Allow wildcards <code>*</code> to work for the current working directory.</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Minishell is not just a project; it's an exploration of the intricate world of shell programming. Embrace the challenges, build a robust shell, and learn the art of command-line interaction. Happy coding, and may your Minishell shine brightly in the realm of shells!</p>","ogImage":{"url":"/assets/projects/dynamic-routing/1337.jpeg"},"coverImage":"/assets/projects/dynamic-routing/1337.jpeg"}},"__N_SSG":true}